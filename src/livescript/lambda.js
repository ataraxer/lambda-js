// Generated by LiveScript 1.2.0
(function(){
  var print, error, warn, monoid, keys, values, type, isObject, isArray, _, exports, slice$ = [].slice;
  print = console.log.bind(console, ">>>:");
  error = console.log.bind(console, "ERROR:");
  warn = console.log.bind(console, "WARNING:");
  monoid = curry$(function(id, op){
    var f;
    f = op;
    f.id = id;
    return f;
  });
  keys = function(xd){
    var k, v, results$ = [];
    for (k in xd) {
      v = xd[k];
      results$.push(k);
    }
    return results$;
  };
  values = function(xd){
    var k, v, results$ = [];
    for (k in xd) {
      v = xd[k];
      results$.push(v);
    }
    return results$;
  };
  type = function(it){
    var ref$;
    return it != null ? (ref$ = it.constructor) != null ? ref$.name : void 8 : void 8;
  };
  isObject = function(){
    return function(){
      return (function(it){
        return it === 'Object';
      })(type.apply(this, arguments));
    };
  };
  isArray = function(){
    return function(){
      return (function(it){
        return it === 'Array';
      })(type.apply(this, arguments));
    };
  };
  _ = {};
  _.dict = function(it){
    var i$, len$, ref$, k, v, results$ = {};
    for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
      ref$ = it[i$], k = ref$[0], v = ref$[1];
      results$[k] = v;
    }
    return results$;
  };
  _.keys = keys;
  _.values = values;
  _.map = curry$(function(f, xs){
    var i$, len$, x, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      results$.push(f(x));
    }
    return results$;
  });
  _.map.indexed = curry$(function(f, xs){
    var i$, len$, i, x, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      i = i$;
      x = xs[i$];
      results$.push(f(x(i)));
    }
    return results$;
  });
  _.map.items = curry$(function(f, kv){
    var k, v, results$ = {};
    for (k in kv) {
      v = kv[k];
      results$[f(k)] = v;
    }
    return results$;
  });
  _.map.values = curry$(function(f, kv){
    var k, v, results$ = {};
    for (k in kv) {
      v = kv[k];
      results$[k] = f(v(k));
    }
    return results$;
  });
  _.map.keys = curry$(function(f, kv){
    var k, v, results$ = {};
    for (k in kv) {
      v = kv[k];
      results$[f(k(v))] = v;
    }
    return results$;
  });
  _.map.flat = function(){
    return _.map(_.flatten.apply(this, arguments));
  };
  _.map.flat.indexed = function(){
    return _.map.indexed(_.flatten.apply(this, arguments));
  };
  _.filter = curry$(function(f, xs){
    var i$, len$, x, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      if (f(x)) {
        results$.push(x);
      }
    }
    return results$;
  });
  _.filter.values = curry$(function(f, kv){
    var predicate;
    predicate = function(arg$){
      var k, v;
      k = arg$[0], v = arg$[1];
      return f(v, k);
    };
    return _.dict(_.filter(predicate, _.items(kv)));
  });
  _.filter.keys = curry$(function(f, kv){
    var predicate;
    predicate = function(arg$){
      var k, v;
      k = arg$[0], v = arg$[1];
      return f(k, v);
    };
    return _.dict(_.filter(predicate, _.items(kv)));
  });
  _.omit = curry$(function(f, xs){
    return _.filter(_.not(f), xs);
  });
  _.omit.values = curry$(function(f, kv){
    return _.filter.values(_.not(f), kv);
  });
  _.omit.keys = curry$(function(f, kv){
    return _.filter.keys(_.not(f), kv);
  });
  _.find = curry$(function(f, xs){
    var i$, len$, x;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      if (f(x)) {
        return x;
      }
    }
  });
  _.find.index = curry$(function(f, xs){
    var i$, len$, i, x;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      i = i$;
      x = xs[i$];
      if (f(x)) {
        return i;
      }
    }
  });
  _.find.keys = curry$(function(f, kv){
    var k, v;
    for (k in kv) {
      v = kv[k];
      if (f(k)) {
        return [k, v];
      }
    }
  });
  _.find.values = curry$(function(f, kv){
    var k, v;
    for (k in kv) {
      v = kv[k];
      if (f(v)) {
        return [k, v];
      }
    }
  });
  _.find.items = curry$(function(f, kv){
    var k, v;
    for (k in kv) {
      v = kv[k];
      if (f(k, v)) {
        return [k, v];
      }
    }
  });
  _.head = function(it){
    return it[0];
  };
  _.tail = function(it){
    return slice$.call(it, 1, -1 + 1 || 9e9);
  };
  _.last = function(it){
    return it[it.length - 1];
  };
  _.init = function(it){
    return slice$.call(it, 0, -1);
  };
  _.take = curry$(function(n, xs){
    return slice$.call(xs[n]);
  });
  _.take['while'] = curry$(function(f, xs){
    var i$, len$, i, x;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      i = i$;
      x = xs[i$];
      if (!f(x)) {
        return _.take(i, xs);
      }
    }
  });
  _.drop = curry$(function(n, xs){
    return slice$.call(xs, n);
  });
  _.drop['while'] = curry$(function(f, xs){
    var i$, len$, i, x;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      i = i$;
      x = xs[i$];
      if (!f(x)) {
        return _.drop(i, xs);
      }
    }
  });
  _.equals = curry$(function(x$, y$){
    return x$ === y$;
  });
  _.gt = curry$(function(x$, y$){
    return x$ > y$;
  });
  _.ge = curry$(function(x$, y$){
    return x$ >= y$;
  });
  _.lt = curry$(function(x$, y$){
    return x$ < y$;
  });
  _.le = curry$(function(x$, y$){
    return x$ <= y$;
  });
  _.positive = (function(it){
    return it > 0;
  });
  _.negative = (function(it){
    return it < 0;
  });
  _.push = curry$(function(x, xs){
    return _.concat(xs, [x]);
  });
  _.length = function(it){
    switch (false) {
    case !isObject(it):
      return _.keys(
      _.length(
      it));
    case !isArray(it):
      return it.length;
    default:
      return 0;
    }
  };
  _.items = function(kv){
    var k, v, results$ = [];
    for (k in kv) {
      v = kv[k];
      results$.push([k, v]);
    }
    return results$;
  };
  _.dot = curry$(function(k, kv){
    return kv[k];
  });
  _.dot.path = curry$(function(ks, kv){
    var i$, len$, k;
    for (i$ = 0, len$ = ks.length; i$ < len$; ++i$) {
      k = ks[i$];
      if (!isHash(kv = kv[k])) {
        return undefined;
      }
    }
    return kv;
  });
  _.dot.mpath = function(){
    var ks;
    ks = slice$.call(arguments);
    return function(kv){
      return _.dot.path(ks, kv);
    };
  };
  _.contains = curry$(function(x$, y$){
    return in$(x$, y$);
  });
  _.contains.values = curry$(function(k, kv){
    return _.contains(k, _.values(kv));
  });
  _.contains.keys = curry$(function(k, kv){
    return _.contains(k, _.keys(kv));
  });
  _['in'] = function(it){
    return (function(it){
      return in$(it, it);
    });
  };
  _['in'].values = curry$(function(kv, v){
    return _['in'](_.values(kv), v);
  });
  _['in'].keys = curry$(function(kv, v){
    return _['in'](_.keys(kv), v);
  });
  _.join = curry$(function(v, xs){
    return xs.join(v);
  });
  _.clone = _.copy = function(obj){
    var deepCopy;
    return deepCopy = function(it){
      var k, v, i$, len$, i, results$ = [];
      switch (false) {
      case !isObject(it):
        for (k in it) {
          v = it[k];
          results$[k] = deepCopy(v);
        }
        return results$;
        break;
      case !isArray(it):
        for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
          i = it[i$];
          results$.push(deepCopy(i));
        }
        return results$;
        break;
      default:
        return it;
      }
    };
  };
  _.reverse = function(){
    return function(it){
      return it.reverse();
    }(_.clone.apply(this, arguments));
  };
  _.add = monoid(0)(curry$(function(x$, y$){
    return x$ + y$;
  }));
  _.multiply = monoid(1)(curry$(function(x$, y$){
    return x$ * y$;
  }));
  _.concat = monoid([])(curry$(function(x$, y$){
    return x$.concat(y$);
  }));
  _.and = monoid(true)(curry$(function(x$, y$){
    return x$ && y$;
  }));
  _.or = monoid(false)(curry$(function(x$, y$){
    return x$ || y$;
  }));
  _.max = monoid(-Infinity)(curry$(function(a, b){
    return Math.max.apply(this, arguments);
  }));
  _.min = monoid(Infinity)(curry$(function(a, b){
    return Math.min.apply(this, arguments);
  }));
  _.extend = monoid({})(curry$(function(a, b){
    return _.dict(
    _.reduce(_.concat)(
    _.map(_.items)(
    [a, b])));
  }));
  _.combine = monoid({})(curry$(function(a, b){
    return _.gather([a, b]);
  }));
  _.reduce = curry$(function(m, xs){
    if (xs.reduce == null) {
      return m.id;
    }
    return xs.reduce(m, m.id);
  });
  _.reduce.keys = curry$(function(m, kv){
    return _.reduce(m, _.keys(kv));
  });
  _.reduce.values = curry$(function(m, kv){
    return _.reduce(m, _.values(kv));
  });
  _.sum = function(xsd){
    return _.reduce(_.add, xsd);
  };
  _.product = function(xsd){
    return _.reduce(_.multiply, xsd);
  };
  _.flatten = function(xs){
    return _.reduce(_.concat, xs);
  };
  _.flatten.dict = function(kv){
    return _.reduce(_.extend, kv);
  };
  _.all = curry$(function(f, xs){
    return _.reduce(_.and, _.map(f, xs));
  });
  _.any = curry$(function(f, xs){
    return _.reduce(_.or, _.map(f, xs));
  });
  _.biggest = function(xs){
    return _.reduce(_.max, xs);
  };
  _.smallest = function(xs){
    return _.reduce(_.min, xs);
  };
  _.gather = function(xs){
    var keys, get;
    keys = _.uniq(_.map.flat(_.keys)(xs));
    get = function(k){
      var values;
      values = _.map(_.dot(k))(_.filter(_.contains.keys(k))(xs));
      return [k, values];
    };
    return _.dict(_.map(get)(keys));
  };
  _.sequence = function(xs){
    var keys, fill;
    keys = _.uniq(_.map.flat(_.keys)(xs));
    fill = _.fill(keys);
    return _.gather(_.map(fill)(xs));
  };
  _.average = function(xs){
    if (_.length(xs) === 0) {
      return 0;
    } else {
      return _.sum(xs) / _.length(xs);
    }
  };
  _.not = function(f){
    return function(){
      var args;
      args = slice$.call(arguments);
      return !f.apply(null, args);
    };
  };
  _.is_number = function(n){
    return !isNaN(_.float(n)) && isFinite(n);
  };
  _.sort = function(xs){
    var numbers, strings, sorted_numbers, sorted_strings;
    numbers = _.map(_.number)(_.filter(_.is_number)(xs));
    strings = _.filter(_.not(_.is_number))(xs);
    sorted_numbers = numbers.sort(a, b(function(){
      return a - b;
    }));
    sorted_strings = strings.sort(a, b(function(){
      return a.localeCompare(b);
    }));
    return _.concat(sorted_numbers, sorted_strings);
  };
  _.sort.by = function(f){
    return function(xs){
      return xs.sort(f);
    };
  };
  _.pipe = function(){
    return _.reduce(curry$(function(x$, y$){
      return function(){
        return y$(x$.apply(this, arguments));
      };
    })(arguments));
  };
  _.compose = function(){
    return _.reduce(curry$(function(x$, y$){
      return function(){
        return x$(y$.apply(this, arguments));
      };
    })(arguments));
  };
  _.apply = curry$(function(f, xs){
    return f.apply(null, xs);
  });
  _.zip = curry$(function(a, b){
    var i$, len$, i, ae, be, results$ = [];
    for (i$ = 0, len$ = a.length; i$ < len$; ++i$) {
      i = i$;
      ae = a[i$];
      if ((be = b[i]) != null) {
        results$.push([ae, be]);
      }
    }
    return results$;
  });
  _.zip['with'] = curry$(function(f, a, b){
    var i$, len$, i, ae, be, results$ = [];
    for (i$ = 0, len$ = a.length; i$ < len$; ++i$) {
      i = i$;
      ae = a[i$];
      if ((be = b[i]) != null) {
        results$.push(f(ae, be));
      }
    }
    return results$;
  });
  _.relate = curry$(function(f, a, b){
    return _.map.values(_.apply(f))(
    _.sequence(
    [a(b)]));
  });
  _.group_by = curry$(function(f, xs){
    var result, i$, len$, x, key;
    result = {};
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      key = f(x);
      result[key] = result[key] || [];
      result[key].push(x);
    }
    return result;
  });
  _.range = curry$(function(a, b, step){
    var i$, results$ = [];
    step == null && (step = 1);
    if (b != null) {
      for (i$ = a; step < 0 ? i$ >= b : i$ <= b; i$ += step) {
        results$.push(i$);
      }
      return results$;
    } else {
      for (i$ = 0; i$ < a; ++i$) {
        results$.push(i$);
      }
      return results$;
    }
  });
  _.replace = curry$(function(a, b, x){
    if (x === a) {
      return b;
    } else {
      return x;
    }
  });
  _.uniq = function(xs){
    var result, i$, len$, x;
    result = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      if (!in$(x, result)) {
        result.push(x);
      }
    }
    return result;
  };
  _.union = curry$(function(a, b){
    return _.uniq(_.concat(a, b));
  });
  _.intersection = curry$(function(a, b){
    return _.filter(function(x){
      return in$(x, a) && in$(x, b);
    })(_.union(a, b));
  });
  _.difference = curry$(function(a, b){
    return _.filter(function(x){
      return !(in$(x, a) && in$(x, b));
    })(_.union(a, b));
  });
  _.fill = curry$(function(xs, xd){
    var f, fillers;
    f = function(x){
      return [x, null];
    };
    fillers = _.dict(_.map(f, xs));
    return _.extend(fillers, xd);
  });
  _.id = function(it){
    return it;
  };
  _.int = function(x){
    switch (x) {
    case false:
      return 0;
    case true:
      return 1;
    default:
      return parseInt(x, 10);
    }
  };
  _.float = function(x){
    switch (x) {
    case false:
      return 0.0;
    case true:
      return 1.0;
    default:
      return parseFloat(x, 10);
    }
  };
  _.number = function(x){
    return _.float(x);
  };
  _.empty = function(xsd){
    return _.length(xsd === 0);
  };
  _.print = function(x){
    console.log(x);
    return x;
  };
  _.message = function(msg){
    return function(x){
      console.log(msg, x);
      return x;
    };
  };
  _.log = function(f){
    return function(x){
      var result;
      console.log(result = f(x));
      return result;
    };
  };
  module.exports = exports = _;
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
